// Code generated by MockGen. DO NOT EDIT.
// Source: fetcher.go
//
// Generated by this command:
//
//	mockgen --source=fetcher.go --destination=./mocks_test.go --package provider --typed
//

// Package provider is a generated GoMock package.
package provider

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// Mockdatabase is a mock of database interface.
type Mockdatabase struct {
	ctrl     *gomock.Controller
	recorder *MockdatabaseMockRecorder
	isgomock struct{}
}

// MockdatabaseMockRecorder is the mock recorder for Mockdatabase.
type MockdatabaseMockRecorder struct {
	mock *Mockdatabase
}

// NewMockdatabase creates a new mock instance.
func NewMockdatabase(ctrl *gomock.Controller) *Mockdatabase {
	mock := &Mockdatabase{ctrl: ctrl}
	mock.recorder = &MockdatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockdatabase) EXPECT() *MockdatabaseMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *Mockdatabase) Add(item BTCPrice) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Add", item)
}

// Add indicates an expected call of Add.
func (mr *MockdatabaseMockRecorder) Add(item any) *MockdatabaseAddCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*Mockdatabase)(nil).Add), item)
	return &MockdatabaseAddCall{Call: call}
}

// MockdatabaseAddCall wrap *gomock.Call
type MockdatabaseAddCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockdatabaseAddCall) Return() *MockdatabaseAddCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockdatabaseAddCall) Do(f func(BTCPrice)) *MockdatabaseAddCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockdatabaseAddCall) DoAndReturn(f func(BTCPrice)) *MockdatabaseAddCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Query mocks base method.
func (m *Mockdatabase) Query(filterFn func(BTCPrice) bool) []BTCPrice {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", filterFn)
	ret0, _ := ret[0].([]BTCPrice)
	return ret0
}

// Query indicates an expected call of Query.
func (mr *MockdatabaseMockRecorder) Query(filterFn any) *MockdatabaseQueryCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*Mockdatabase)(nil).Query), filterFn)
	return &MockdatabaseQueryCall{Call: call}
}

// MockdatabaseQueryCall wrap *gomock.Call
type MockdatabaseQueryCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockdatabaseQueryCall) Return(arg0 []BTCPrice) *MockdatabaseQueryCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockdatabaseQueryCall) Do(f func(func(BTCPrice) bool) []BTCPrice) *MockdatabaseQueryCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockdatabaseQueryCall) DoAndReturn(f func(func(BTCPrice) bool) []BTCPrice) *MockdatabaseQueryCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Mockbroadcaster is a mock of broadcaster interface.
type Mockbroadcaster struct {
	ctrl     *gomock.Controller
	recorder *MockbroadcasterMockRecorder
	isgomock struct{}
}

// MockbroadcasterMockRecorder is the mock recorder for Mockbroadcaster.
type MockbroadcasterMockRecorder struct {
	mock *Mockbroadcaster
}

// NewMockbroadcaster creates a new mock instance.
func NewMockbroadcaster(ctrl *gomock.Controller) *Mockbroadcaster {
	mock := &Mockbroadcaster{ctrl: ctrl}
	mock.recorder = &MockbroadcasterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockbroadcaster) EXPECT() *MockbroadcasterMockRecorder {
	return m.recorder
}

// Broadcast mocks base method.
func (m *Mockbroadcaster) Broadcast(message []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Broadcast", message)
}

// Broadcast indicates an expected call of Broadcast.
func (mr *MockbroadcasterMockRecorder) Broadcast(message any) *MockbroadcasterBroadcastCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Broadcast", reflect.TypeOf((*Mockbroadcaster)(nil).Broadcast), message)
	return &MockbroadcasterBroadcastCall{Call: call}
}

// MockbroadcasterBroadcastCall wrap *gomock.Call
type MockbroadcasterBroadcastCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockbroadcasterBroadcastCall) Return() *MockbroadcasterBroadcastCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockbroadcasterBroadcastCall) Do(f func([]byte)) *MockbroadcasterBroadcastCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockbroadcasterBroadcastCall) DoAndReturn(f func([]byte)) *MockbroadcasterBroadcastCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockbtcPriceProvider is a mock of btcPriceProvider interface.
type MockbtcPriceProvider struct {
	ctrl     *gomock.Controller
	recorder *MockbtcPriceProviderMockRecorder
	isgomock struct{}
}

// MockbtcPriceProviderMockRecorder is the mock recorder for MockbtcPriceProvider.
type MockbtcPriceProviderMockRecorder struct {
	mock *MockbtcPriceProvider
}

// NewMockbtcPriceProvider creates a new mock instance.
func NewMockbtcPriceProvider(ctrl *gomock.Controller) *MockbtcPriceProvider {
	mock := &MockbtcPriceProvider{ctrl: ctrl}
	mock.recorder = &MockbtcPriceProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockbtcPriceProvider) EXPECT() *MockbtcPriceProviderMockRecorder {
	return m.recorder
}

// GetPrice mocks base method.
func (m *MockbtcPriceProvider) GetPrice(arg0 context.Context) (BTCPrice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrice", arg0)
	ret0, _ := ret[0].(BTCPrice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrice indicates an expected call of GetPrice.
func (mr *MockbtcPriceProviderMockRecorder) GetPrice(arg0 any) *MockbtcPriceProviderGetPriceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrice", reflect.TypeOf((*MockbtcPriceProvider)(nil).GetPrice), arg0)
	return &MockbtcPriceProviderGetPriceCall{Call: call}
}

// MockbtcPriceProviderGetPriceCall wrap *gomock.Call
type MockbtcPriceProviderGetPriceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockbtcPriceProviderGetPriceCall) Return(arg0 BTCPrice, arg1 error) *MockbtcPriceProviderGetPriceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockbtcPriceProviderGetPriceCall) Do(f func(context.Context) (BTCPrice, error)) *MockbtcPriceProviderGetPriceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockbtcPriceProviderGetPriceCall) DoAndReturn(f func(context.Context) (BTCPrice, error)) *MockbtcPriceProviderGetPriceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
