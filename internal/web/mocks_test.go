// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go
//
// Generated by this command:
//
//	mockgen --source=handler.go --destination=./mocks_test.go --package web --typed
//

// Package web is a generated GoMock package.
package web

import (
	reflect "reflect"

	provider "github.com/rbenatti8/awesome-btc-price/internal/provider"
	gomock "go.uber.org/mock/gomock"
)

// Mockdatabase is a mock of database interface.
type Mockdatabase struct {
	ctrl     *gomock.Controller
	recorder *MockdatabaseMockRecorder
	isgomock struct{}
}

// MockdatabaseMockRecorder is the mock recorder for Mockdatabase.
type MockdatabaseMockRecorder struct {
	mock *Mockdatabase
}

// NewMockdatabase creates a new mock instance.
func NewMockdatabase(ctrl *gomock.Controller) *Mockdatabase {
	mock := &Mockdatabase{ctrl: ctrl}
	mock.recorder = &MockdatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockdatabase) EXPECT() *MockdatabaseMockRecorder {
	return m.recorder
}

// Query mocks base method.
func (m *Mockdatabase) Query(filterFn func(provider.BTCPrice) bool) []provider.BTCPrice {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", filterFn)
	ret0, _ := ret[0].([]provider.BTCPrice)
	return ret0
}

// Query indicates an expected call of Query.
func (mr *MockdatabaseMockRecorder) Query(filterFn any) *MockdatabaseQueryCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*Mockdatabase)(nil).Query), filterFn)
	return &MockdatabaseQueryCall{Call: call}
}

// MockdatabaseQueryCall wrap *gomock.Call
type MockdatabaseQueryCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockdatabaseQueryCall) Return(arg0 []provider.BTCPrice) *MockdatabaseQueryCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockdatabaseQueryCall) Do(f func(func(provider.BTCPrice) bool) []provider.BTCPrice) *MockdatabaseQueryCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockdatabaseQueryCall) DoAndReturn(f func(func(provider.BTCPrice) bool) []provider.BTCPrice) *MockdatabaseQueryCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
